import sys
import os
from trino.dbapi import connect
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor
import warnings

# Ignore SSL warnings
warnings.filterwarnings("ignore", message="Unverified HTTPS request")

def connect_trino(host, catalog, schema, user, password):
    conn = connect(
        host=host,
        port=443,
        http_scheme="https",
        user=user,
        auth=BasicAuthentication(user, password),
        catalog=catalog,
        schema=schema,
        verify=False
    )
    return conn

def schema_exists(conn, schema_name):
    cursor = conn.cursor()
    cursor.execute(f"SHOW SCHEMAS")
    schemas = [row[0] for row in cursor.fetchall()]
    return schema_name in schemas

def create_schema(conn_source, conn_dest, schema_name):
    cursor_source = conn_source.cursor()
    cursor_source.execute(f"SHOW CREATE SCHEMA {schema_name}")
    create_schema_sql = cursor_source.fetchone()[0]

    cursor_dest = conn_dest.cursor()
    cursor_dest.execute(create_schema_sql)
    print(f"Schema '{schema_name}' created on destination.")

def get_tables(conn, schema_name):
    cursor = conn.cursor()
    cursor.execute(f"SHOW TABLES FROM {schema_name}")
    return [row[0] for row in cursor.fetchall()]

def table_exists(conn, schema_name, table_name):
    cursor = conn.cursor()
    cursor.execute(f"SHOW TABLES FROM {schema_name}")
    tables = [row[0] for row in cursor.fetchall()]
    return table_name in tables

def create_table(conn_source, conn_dest, schema_name, table_name):
    cursor_source = conn_source.cursor()
    cursor_source.execute(f"SHOW CREATE TABLE {schema_name}.{table_name}")
    create_table_sql = cursor_source.fetchone()[0]

    cursor_dest = conn_dest.cursor()
    cursor_dest.execute(create_table_sql)

def main():
    if len(sys.argv) != 9:
        print("Usage: replicate_trino.py <source_trino_host> <dest_trino_host> <source_catalog> <dest_catalog> <schema_name> <full_schema_replicate> <username> <password>")
        sys.exit(1)

    source_trino_host = sys.argv[1]
    dest_trino_host = sys.argv[2]
    source_catalog = sys.argv[3]
    dest_catalog = sys.argv[4]
    schema_name = sys.argv[5]
    full_schema_replicate = sys.argv[6].lower()
    username = sys.argv[7]
    password = sys.argv[8]

    print(f"Starting replication process for schema: {schema_name}")

    conn_source = connect_trino(source_trino_host, source_catalog, schema_name, username, password)
    conn_dest = connect_trino(dest_trino_host, dest_catalog, schema_name, username, password)

    # Step 1: Schema creation if not exists
    if not schema_exists(conn_dest, schema_name):
        print(f"Schema '{schema_name}' does not exist on destination. Creating...")
        create_schema(conn_source, conn_dest, schema_name)
    else:
        print(f"Schema '{schema_name}' already exists on destination.")

    # Step 2: Table replication
    source_tables = get_tables(conn_source, schema_name)
    print(f"Found {len(source_tables)} tables in source.")

    # Read table list if partial replication
    tables_to_replicate = source_tables
    if full_schema_replicate == "no":
        artifact_path = f"artifacts/{schema_name}_tables.txt"
        if os.path.exists(artifact_path):
            with open(artifact_path, "r") as f:
                tables_to_replicate = [line.strip() for line in f if line.strip()]
            print(f"Partial replication enabled. {len(tables_to_replicate)} tables to replicate.")
        else:
            print(f"Partial replication selected but '{artifact_path}' not found. Exiting.")
            sys.exit(1)

    # Replicate tables
    with ThreadPoolExecutor(max_workers=3) as executor:
        futures = []
        for table_name in tables_to_replicate:
            futures.append(executor.submit(replicate_single_table, conn_source, conn_dest, schema_name, table_name))

        for _ in tqdm(futures, desc="Replicating tables", unit="table"):
            _.result()

    print("Replication completed successfully.")

def replicate_single_table(conn_source, conn_dest, schema_name, table_name):
    if not table_exists(conn_dest, schema_name, table_name):
        create_table(conn_source, conn_dest, schema_name, table_name)
        print(f"Table '{table_name}' created.")
    else:
        print(f"Table '{table_name}' already exists. Skipping.")

if __name__ == "__main__":
    from trino.auth import BasicAuthentication
    main()
