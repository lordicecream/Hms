import trino
import argparse
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm

def get_trino_connection(host, username, password):
    return trino.dbapi.connect(
        host=host,
        port=443,
        user=username,
        auth=trino.auth.BasicAuthentication(username, password),
        http_scheme="https",
        verify=False  # Disable SSL certificate verification
    )

def catalog_exists(cursor, catalog_name):
    cursor.execute("SHOW CATALOGS")
    catalogs = [row[0] for row in cursor.fetchall()]
    return catalog_name in catalogs

def schema_exists(cursor, catalog, schema):
    cursor.execute(f"SHOW SCHEMAS FROM {catalog}")
    schemas = [row[0] for row in cursor.fetchall()]
    return schema in schemas

def table_exists(cursor, catalog, schema, table):
    cursor.execute(f"SHOW TABLES FROM {catalog}.{schema}")
    tables = [row[0] for row in cursor.fetchall()]
    return table in tables

def replicate_schema(source_cursor, dest_cursor, source_catalog, dest_catalog, schema, dry_run):
    if not schema_exists(dest_cursor, dest_catalog, schema):
        source_cursor.execute(f"SHOW CREATE SCHEMA {source_catalog}.{schema}")
        create_schema_sql = source_cursor.fetchone()[0]
        create_schema_sql = create_schema_sql.replace(source_catalog, dest_catalog)
        if dry_run:
            print(f"[Dry Run] Would create schema:\n{create_schema_sql}\n")
        else:
            dest_cursor.execute(create_schema_sql)
            print(f"[INFO] Schema {schema} created in {dest_catalog}.")
    else:
        print(f"[INFO] Schema {schema} already exists in {dest_catalog}.")

def replicate_table(source_cursor, dest_cursor, source_catalog, dest_catalog, schema, table, dry_run):
    if not table_exists(dest_cursor, dest_catalog, schema, table):
        source_cursor.execute(f"SHOW CREATE TABLE {source_catalog}.{schema}.{table}")
        create_table_sql = source_cursor.fetchone()[0]
        create_table_sql = create_table_sql.replace(source_catalog, dest_catalog)
        if dry_run:
            print(f"[Dry Run] Would create table {schema}.{table}.")
        else:
            dest_cursor.execute(create_table_sql)
            print(f"[INFO] Table {schema}.{table} created.")
    else:
        print(f"[INFO] Table {schema}.{table} already exists.")

def get_tables_list(cursor, catalog, schema, artifacts_path):
    artifact_file = os.path.join(artifacts_path, f"{schema}_tables.txt")
    if os.path.exists(artifact_file):
        with open(artifact_file, "r") as f:
            tables = [line.strip() for line in f if line.strip()]
        print(f"[INFO] Using tables from artifact file: {artifact_file}")
    else:
        cursor.execute(f"SHOW TABLES FROM {catalog}.{schema}")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"[INFO] No artifact file found. Replicating all tables.")
    return tables

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--source_trino_host", required=True)
    parser.add_argument("--dest_trino_host", required=True)
    parser.add_argument("--username", required=True)
    parser.add_argument("--password", required=True)
    parser.add_argument("--source_catalog", required=True, help="Source catalog name")
    parser.add_argument("--dest_catalog", required=True, help="Destination catalog name")
    parser.add_argument("--schema_name", required=True)
    parser.add_argument("--dry_run", type=bool, default=True)
    parser.add_argument("--artifacts_path", type=str, default="./artifact")
    args = parser.parse_args()

    source_conn = get_trino_connection(args.source_trino_host, args.username, args.password)
    dest_conn = get_trino_connection(args.dest_trino_host, args.username, args.password)

    source_cursor = source_conn.cursor()
    dest_cursor = dest_conn.cursor()

    # Validate catalogs
    if not catalog_exists(source_cursor, args.source_catalog):
        raise Exception(f"Source catalog {args.source_catalog} does not exist!")
    if not catalog_exists(dest_cursor, args.dest_catalog):
        raise Exception(f"Destination catalog {args.dest_catalog} does not exist!")

    # Replicate schema if needed
    replicate_schema(source_cursor, dest_cursor, args.source_catalog, args.dest_catalog, args.schema_name, args.dry_run)

    # Get tables
    tables = get_tables_list(source_cursor, args.source_catalog, args.schema_name, args.artifacts_path)

    # Parallel table replication
    with ThreadPoolExecutor(max_workers=3) as executor:
        futures = [
            executor.submit(replicate_table, source_cursor, dest_cursor, args.source_catalog, args.dest_catalog, args.schema_name, table, args.dry_run)
            for table in tables
        ]
        for _ in tqdm(as_completed(futures), total=len(futures), desc="Replicating tables"):
            pass

if __name__ == "__main__":
    main()
