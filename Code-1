import trino
from trino.auth import BasicAuthentication
from trino.dbapi import connect

def connect_to_trino(host, port, user, password):
    return connect(
        host=host,
        port=int(port),
        user=user,
        auth=BasicAuthentication(user, password),
        http_scheme='https',
        catalog='system',
        verify=False
    )

def schema_exists(conn, catalog, schema):
    cursor = conn.cursor()
    cursor.execute(f"SHOW SCHEMAS FROM {catalog}")
    schemas = [row[0] for row in cursor.fetchall()]
    return schema in schemas

def get_create_schema_sql(conn, catalog, schema):
    cursor = conn.cursor()
    cursor.execute(f"SHOW CREATE SCHEMA {catalog}.{schema}")
    return cursor.fetchall()[0][0]

def list_tables(conn, catalog, schema):
    cursor = conn.cursor()
    cursor.execute(f"SHOW TABLES FROM {catalog}.{schema}")
    return [row[0] for row in cursor.fetchall()]

def get_create_table_sql(conn, catalog, schema, table):
    cursor = conn.cursor()
    cursor.execute(f"SHOW CREATE TABLE {catalog}.{schema}.{table}")
    return cursor.fetchall()[0][0]

def replicate_schema_if_missing(source_conn, dest_conn, source_catalog, dest_catalog, schema):
    if not schema_exists(dest_conn, dest_catalog, schema):
        create_schema_sql = get_create_schema_sql(source_conn, source_catalog, schema)
        adjusted_sql = create_schema_sql.replace(f"{source_catalog}.{schema}", f"{dest_catalog}.{schema}")
        dest_conn.cursor().execute(adjusted_sql)

def replicate_selected_tables(source_conn, dest_conn, source_catalog, dest_catalog, schema, table_list):
    dest_tables = list_tables(dest_conn, dest_catalog, schema)

    for table in table_list:
        table = table.strip()
        if table and table not in dest_tables:
            create_table_sql = get_create_table_sql(source_conn, source_catalog, schema, table)
            adjusted_sql = create_table_sql.replace(f"{source_catalog}.{schema}.{table}", f"{dest_catalog}.{schema}.{table}")
            dest_conn.cursor().execute(adjusted_sql)

# -------------- Configuration --------------------
# You will pass these via Jenkins later
source_host = 'your-trino-source-host'
dest_host = 'your-trino-dest-host'
port = 443
user = 'your-user'
password = 'your-password'
source_catalog = 'hmsa'
dest_catalog = 'hmsb'
schema = 'abc'
full_schema_replicate = False  # set True for full schema
table_list_file = 'tables_to_replicate.txt'  # used only if full_schema_replicate is False

# -------------- Connect --------------------------
source_conn = connect_to_trino(source_host, port, user, password)
dest_conn = connect_to_trino(dest_host, port, user, password)

# Check if schema exists, replicate if not
if not schema_exists(dest_conn, dest_catalog, schema):
    print(f"Schema '{schema}' not found in '{dest_catalog}', replicating...")
    replicate_schema_if_missing(source_conn, dest_conn, source_catalog, dest_catalog, schema)
    print(f"Schema '{schema}' replicated successfully.")
else:
    print(f"Schema '{schema}' already exists in '{dest_catalog}'.")

# Decide tables to replicate
if full_schema_replicate:
    source_tables = list_tables(source_conn, source_catalog, schema)
    print(f"Replicating all tables from schema '{schema}': {source_tables}")
else:
    with open(table_list_file, 'r') as f:
        source_tables = [t.strip() for t in f.read().strip().split(',') if t.strip()]
    print(f"Replicating selected tables from schema '{schema}': {source_tables}")

# List tables in destination to compare
dest_tables = list_tables(dest_conn, dest_catalog, schema)

# Replicate missing tables
for table in source_tables:
    if table not in dest_tables:
        print(f"Table '{table}' not found in destination. Replicating...")
        create_sql = get_create_table_sql(source_conn, source_catalog, schema, table)
        create_sql = create_sql.replace(
            f"{source_catalog}.{schema}.{table}",
            f"{dest_catalog}.{schema}.{table}"
        )
        dest_conn.cursor().execute(create_sql)
        print(f"Table '{table}' replicated successfully.")
    else:
        print(f"Table '{table}' already exists in destination. Skipping.")
