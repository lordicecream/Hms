import trino
import argparse
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm

def get_trino_connection(host, username, password):
    return trino.dbapi.connect(
        host=host,
        port=443,
        user=username,
        auth=trino.auth.BasicAuthentication(username, password),
        http_scheme="https",
        verify=False
    )

def get_all_tables(trino_conn, catalog, schema):
    cursor = trino_conn.cursor()
    cursor.execute(f"SHOW TABLES FROM {catalog}.{schema}")
    return [row[0] for row in cursor.fetchall()]

def run_sync(table, host, username, password, catalog, schema, dry_run):
    query = (
        f"CALL system.sync_partition_metadata('{catalog}', '{schema}', '{table}', 'FULL', false)"
    )
    if dry_run:
        print(f"[Dry Run] Would run: {query}")
        return
    try:
        conn = get_trino_connection(host, username, password)
        cursor = conn.cursor()
        print(f"[Running] {catalog}.{schema}.{table}")
        cursor.execute(query)
        print(f"[Done] {catalog}.{schema}.{table}")
    except Exception as e:
        print(f"[Error] {catalog}.{schema}.{table}: {e}")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--trino_host", required=True)
    parser.add_argument("--username", required=True)
    parser.add_argument("--password", required=True)
    parser.add_argument("--catalog", required=True)
    parser.add_argument("--schema", required=True)
    parser.add_argument("--dry_run", type=bool, default=True)
    args = parser.parse_args()

    # Use one connection for listing tables
    base_conn = get_trino_connection(args.trino_host, args.username, args.password)
    tables = get_all_tables(base_conn, args.catalog, args.schema)

    with ThreadPoolExecutor(max_workers=3) as executor:
        futures = {
            executor.submit(run_sync, table, args.trino_host, args.username, args.password,
                            args.catalog, args.schema, args.dry_run): table
            for table in tables
        }
        for _ in tqdm(as_completed(futures), total=len(futures), desc="Partition Sync Progress"):
            pass

if __name__ == "__main__":
    main()
