import argparse
import requests
from trino.dbapi import connect
from trino.auth import BasicAuthentication

def run_query(host, user, password, query):
    conn = connect(
        http_scheme="https",
        host=host.replace("https://", "").replace("http://", ""),
        port=443,
        user=user,
        auth=BasicAuthentication(user, password),
        verify=False,
    )
    cur = conn.cursor()
    cur.execute(query)
    return cur.fetchall()

def schema_exists(host, user, password, catalog, schema):
    query = f"SHOW SCHEMAS FROM {catalog}"
    schemas = [row[0] for row in run_query(host, user, password, query)]
    return schema in schemas

def create_schema_if_missing(source_host, dest_host, user, password, source_catalog, dest_catalog, schema):
    if not schema_exists(dest_host, user, password, dest_catalog, schema):
        print(f"Schema '{schema}' not found in {dest_catalog}, replicating from source...")
        show_create = run_query(source_host, user, password, f"SHOW CREATE SCHEMA {source_catalog}.{schema}")
        create_stmt = show_create[0][0]
        create_stmt = create_stmt.replace(f"{source_catalog}.{schema}", f"{dest_catalog}.{schema}")
        run_query(dest_host, user, password, create_stmt)
        print(f"Schema '{schema}' created.")
    else:
        print(f"Schema '{schema}' already exists in {dest_catalog}.")

def table_exists(host, user, password, catalog, schema, table):
    query = f"SHOW TABLES FROM {catalog}.{schema}"
    tables = [row[0] for row in run_query(host, user, password, query)]
    return table in tables

def replicate_table(source_host, dest_host, user, password, source_catalog, dest_catalog, schema, table):
    if not table_exists(dest_host, user, password, dest_catalog, schema, table):
        print(f"Table '{table}' not found in {dest_catalog}.{schema}, replicating...")
        show_create = run_query(source_host, user, password, f"SHOW CREATE TABLE {source_catalog}.{schema}.{table}")
        create_stmt = show_create[0][0]
        create_stmt = create_stmt.replace(f"{source_catalog}.{schema}", f"{dest_catalog}.{schema}")
        run_query(dest_host, user, password, create_stmt)
        print(f"Table '{table}' created.")
    else:
        print(f"Table '{table}' already exists in {dest_catalog}.{schema}.")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--source-host", required=True)
    parser.add_argument("--dest-host", required=True)
    parser.add_argument("--username", required=True)
    parser.add_argument("--password", required=True)
    parser.add_argument("--schema", required=True)
    parser.add_argument("--source-catalog", required=True)
    parser.add_argument("--dest-catalog", required=True)
    parser.add_argument("--full", action="store_true")
    parser.add_argument("--table-file", help="Path to file with comma-separated table names")

    args = parser.parse_args()

    create_schema_if_missing(
        args.source_host, args.dest_host, args.username, args.password,
        args.source_catalog, args.dest_catalog, args.schema
    )

    if args.full:
        query = f"SHOW TABLES FROM {args.source_catalog}.{args.schema}"
        tables = [row[0] for row in run_query(args.source_host, args.username, args.password, query)]
    else:
        with open(args.table_file, "r") as f:
            tables = [tbl.strip() for tbl in f.read().split(",") if tbl.strip()]

    for table in tables:
        replicate_table(
            args.source_host, args.dest_host, args.username, args.password,
            args.source_catalog, args.dest_catalog, args.schema, table
        )

if __name__ == "__main__":
    main()
