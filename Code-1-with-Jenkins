import os
import sys
import trino
from trino.auth import BasicAuthentication

def connect_to_trino(host, user, password):
    return trino.dbapi.connect(
        host=host.replace("https://", "").replace("http://", ""),  # remove https://
        port=443,
        user=user,
        auth=BasicAuthentication(user, password),
        http_scheme="https",
        verify=False,
        catalog="system"
    )

def get_create_schema(cursor, catalog, schema):
    cursor.execute(f"SHOW CREATE SCHEMA {catalog}.{schema}")
    result = cursor.fetchone()
    return result[0] if result else None

def get_all_tables(cursor, catalog, schema):
    cursor.execute(f"SHOW TABLES FROM {catalog}.{schema}")
    tables = [row[0] for row in cursor.fetchall()]
    return tables

def get_create_table(cursor, catalog, schema, table):
    cursor.execute(f"SHOW CREATE TABLE {catalog}.{schema}.{table}")
    result = cursor.fetchone()
    return result[0] if result else None

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("--source_host")
    parser.add_argument("--dest_host")
    parser.add_argument("--source_catalog")
    parser.add_argument("--dest_catalog")
    parser.add_argument("--schema_name")
    parser.add_argument("--full_schema_replicate")
    parser.add_argument("--username")
    parser.add_argument("--password")
    args = parser.parse_args()

    print("\n=== Connecting to Source and Destination Trino ===")
    source_conn = connect_to_trino(args.source_host, args.username, args.password)
    dest_conn = connect_to_trino(args.dest_host, args.username, args.password)

    source_cursor = source_conn.cursor()
    dest_cursor = dest_conn.cursor()

    # Step 1: Check if schema exists
    dest_cursor.execute(f"SHOW SCHEMAS IN {args.dest_catalog}")
    dest_schemas = [row[0] for row in dest_cursor.fetchall()]

    if args.schema_name not in dest_schemas:
        print(f"Schema '{args.schema_name}' NOT found in destination. Creating it...")
        create_schema_sql = get_create_schema(source_cursor, args.source_catalog, args.schema_name)
        if create_schema_sql:
            dest_cursor.execute(create_schema_sql)
            print(f"Schema '{args.schema_name}' created successfully in destination.")
        else:
            print(f"Failed to fetch schema DDL for {args.schema_name} from source.")
            sys.exit(1)
    else:
        print(f"Schema '{args.schema_name}' already exists in destination. Skipping creation.")

    # Step 2: Decide tables
    if args.full_schema_replicate.lower() == "no":
        artifact_file = f"artifact/{args.schema_name}_tables.txt"
        if not os.path.exists(artifact_file):
            print(f"Artifact file '{artifact_file}' not found!")
            sys.exit(1)
        with open(artifact_file, "r") as f:
            tables_to_copy = [t.strip() for t in f.read().split(",") if t.strip()]
        print(f"Tables to replicate (partial): {tables_to_copy}")
    else:
        tables_to_copy = get_all_tables(source_cursor, args.source_catalog, args.schema_name)
        print(f"Tables to replicate (full schema): {tables_to_copy}")

    # Step 3: Replicate tables
    dest_tables = get_all_tables(dest_cursor, args.dest_catalog, args.schema_name)

    for table in tables_to_copy:
        if table not in dest_tables:
            print(f"Table '{table}' not found in destination. Creating it...")
            create_table_sql = get_create_table(source_cursor, args.source_catalog, args.schema_name, table)
            if create_table_sql:
                dest_cursor.execute(create_table_sql)
                print(f"Table '{table}' created successfully.")
            else:
                print(f"Failed to fetch DDL for table '{table}'. Skipping.")
        else:
            print(f"Table '{table}' already exists in destination. Skipping.")

    print("\n=== Metadata replication completed successfully ===")
