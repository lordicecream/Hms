pipeline {
    agent any
    environment {
        GIT_REPO_URL = 'https://your-repo-url.git'
        GIT_CREDENTIALS_ID = 'your-credentials-id'
        DOCKER_IMAGE = 'your-docker-image'
        WORKSPACE_DIR = "${env.WORKSPACE}"
    }
    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to use for the git clone')
        string(name: 'SOURCE_TRINO_HOST', description: 'Source Trino host')
        string(name: 'DEST_TRINO_HOST', description: 'Destination Trino host')
        string(name: 'SOURCE_CATALOG', description: 'Source catalog name')
        string(name: 'DEST_CATALOG', description: 'Destination catalog name')
        string(name: 'SCHEMA_NAME', description: 'Schema to replicate')
        booleanParam(name: 'FULL_REPLICATION', defaultValue: true, description: 'Is full schema replication required?')
        string(name: 'ARTIFACTS_PATH', defaultValue: '', description: 'Artifacts path for partial replication (only required if FULL_REPLICATION is false)')
        booleanParam(name: 'DRY_RUN', defaultValue: true, description: 'Dry run the replication without executing it')
    }
    stages {
        stage('Git Clone') {
            steps {
                script {
                    // Clone the specified branch of the repo
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "refs/heads/${params.BRANCH}"]],
                        userRemoteConfigs: [[url: "${env.GIT_REPO_URL}", credentialsId: "${env.GIT_CREDENTIALS_ID}"]]
                    ])
                }
            }
        }
        stage('Load Trino Credentials') {
            steps {
                script {
                    // Load Trino credentials from Jenkins Credentials Store
                    def trinoCredentials = withCredentials([usernamePassword(credentialsId: 'trino-credentials-id', usernameVariable: 'TRINO_USERNAME', passwordVariable: 'TRINO_PASSWORD')]) {
                        return [TRINO_USERNAME, TRINO_PASSWORD]
                    }
                    // Store credentials as environment variables
                    env.TRINO_USERNAME = trinoCredentials[0]
                    env.TRINO_PASSWORD = trinoCredentials[1]
                }
            }
        }
        stage('Copy Files to Docker Container') {
            steps {
                script {
                    // Copy everything from Jenkins workspace to the Docker container
                    sh """
                        # Run a temporary container in the background
                        docker run --rm -d --name temp_container ${env.DOCKER_IMAGE} tail -f /dev/null

                        # Copy the contents of the Jenkins workspace to the Docker container
                        docker cp ${env.WORKSPACE}/ temp_container:/workspace

                        # Stop the container after the copy is done
                        docker stop temp_container
                    """
                }
            }
        }
        stage('Run Python Script Inside Docker') {
            steps {
                script {
                    // Set the artifacts path only if FULL_REPLICATION is false
                    def artifactsPathArg = params.FULL_REPLICATION ? "" : "--artifacts_path ${params.ARTIFACTS_PATH}"

                    // Run the Python script inside the Docker container
                    sh """
                        docker run --rm \\
                            -e TRINO_USERNAME=${env.TRINO_USERNAME} \\
                            -e TRINO_PASSWORD=${env.TRINO_PASSWORD} \\
                            -v ${env.WORKSPACE}/:/workspace \\
                            ${env.DOCKER_IMAGE} \\
                            python3 /workspace/trino_replicate.py \\
                            --source_trino_host ${params.SOURCE_TRINO_HOST} \\
                            --dest_trino_host ${params.DEST_TRINO_HOST} \\
                            --username ${env.TRINO_USERNAME} \\
                            --password ${env.TRINO_PASSWORD} \\
                            --source_catalog ${params.SOURCE_CATALOG} \\
                            --dest_catalog ${params.DEST_CATALOG} \\
                            --schema_name ${params.SCHEMA_NAME} \\
                            --dry_run ${params.DRY_RUN} \\
                            ${artifactsPathArg}
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()  // Clean workspace after the job is complete
        }
    }
}
