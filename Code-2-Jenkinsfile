pipeline {
    agent any
    environment {
        GIT_REPO = 'https://your_git_repo_url'  // Replace with your actual Git repository URL
    }
    parameters {
        string(name: 'source_trino_host', description: 'Source Trino Host URL', defaultValue: 'https://source-trino-host.com')
        string(name: 'dest_trino_host', description: 'Destination Trino Host URL', defaultValue: 'https://dest-trino-host.com')
        string(name: 'source_catalog', description: 'Source Trino Catalog', defaultValue: 'hmsa')
        string(name: 'dest_catalog', description: 'Destination Trino Catalog', defaultValue: 'hmsb')
        string(name: 'schema_name', description: 'Schema Name to Replicate', defaultValue: 'abc')
        booleanParam(name: 'dry_run', description: 'Run in Dry-Run Mode?', defaultValue: false)
        choice(name: 'full_schema_replication', choices: ['true', 'false'], description: 'Is full schema replication required?')
        string(name: 'artifacts_path', description: 'Path to artifacts folder with table names (required if partial replication)', defaultValue: '', required: false)
        string(name: 'branch_name', description: 'Branch Name to Checkout', defaultValue: 'main')  // Added branch parameter
    }
    stages {
        stage('Cleanup Workspace') {
            steps {
                script {
                    cleanWs()  // Clean the workspace at the start
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    // Checkout the specified branch from Git repository
                    checkout scm
                    sh "git checkout ${params.branch_name}"  // Checkout the specified branch
                }
            }
        }

        stage('Validate Parameters') {
            when {
                expression { return params.full_schema_replication == 'false' }
            }
            steps {
                script {
                    // If partial replication is selected, ensure artifacts_path is provided
                    if (!params.artifacts_path) {
                        error("artifacts_path parameter must be provided for partial replication.")
                    }
                }
            }
        }

        stage('Run Python Script in Docker') {
            environment {
                // Retrieve username and password securely from Jenkins Credentials Store
                TRINO_USERNAME = credentials('trino_username')  // Use Jenkins secret for username
                TRINO_PASSWORD = credentials('trino_password')  // Use Jenkins secret for password
            }
            steps {
                script {
                    // Execute Python script inside a Docker container with all necessary parameters
                    sh """
                        docker run --rm \
                        -v \$(pwd)/trino-replicate:/app \
                        -w /app \
                        python:3.8 bash -c "
                            pip install trino &&
                            python trino-replicate/replicate_trino.py \
                            --source_trino_host ${params.source_trino_host} \
                            --dest_trino_host ${params.dest_trino_host} \
                            --username \$TRINO_USERNAME \
                            --password \$TRINO_PASSWORD \
                            --source_catalog ${params.source_catalog} \
                            --dest_catalog ${params.dest_catalog} \
                            --schema_name ${params.schema_name} \
                            --dry_run ${params.dry_run} \
                            --full_schema_replication ${params.full_schema_replication} \
                            --artifacts_path ${params.artifacts_path}
                        "
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()  // Clean workspace after every run
        }
    }
}
