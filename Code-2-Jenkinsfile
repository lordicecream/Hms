pipeline {
    agent none  // We'll define the agent explicitly, using a Docker container in a script block

    parameters {
        string(name: 'GIT_REPO', defaultValue: '', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to use for the replication')
        booleanParam(name: 'FULL_REPLICATION', defaultValue: true, description: 'Full Schema Replication')
        string(name: 'ARTIFACTS_PATH', defaultValue: '', description: 'Path to artifacts if partial replication is required')
        string(name: 'SOURCE_TRINO_HOST', defaultValue: '', description: 'Source Trino Host')
        string(name: 'DEST_TRINO_HOST', defaultValue: '', description: 'Destination Trino Host')
        string(name: 'SOURCE_CATALOG', defaultValue: '', description: 'Source Trino Catalog')
        string(name: 'DEST_CATALOG', defaultValue: '', description: 'Destination Trino Catalog')
        string(name: 'SCHEMA_NAME', defaultValue: '', description: 'The schema name to replicate')
        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Dry-run mode (no actual changes)')
    }

    environment {
        TRINO_USERNAME = ''
        TRINO_PASSWORD = ''
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    // Check if FULL_REPLICATION is false and ARTIFACTS_PATH is set
                    if (!params.FULL_REPLICATION && params.ARTIFACTS_PATH?.trim()) {
                        echo "Partial replication selected. Using artifacts from: ${params.ARTIFACTS_PATH}"
                    } else if (params.FULL_REPLICATION) {
                        echo "Full replication selected. Proceeding with full schema replication."
                    } else {
                        error("Artifacts path must be provided for partial replication.")
                    }

                    // Validate Trino host, catalog, and schema parameters
                    if (!params.SOURCE_TRINO_HOST || !params.DEST_TRINO_HOST) {
                        error("Both source and destination Trino hosts must be provided.")
                    }
                    if (!params.SOURCE_CATALOG || !params.DEST_CATALOG) {
                        error("Both source and destination catalogs must be provided.")
                    }
                    if (!params.SCHEMA_NAME) {
                        error("Schema name must be provided for replication.")
                    }
                }
            }
        }

        stage('Git Clone') {
            steps {
                script {
                    echo "Cloning repository: ${params.GIT_REPO}, Branch: ${params.BRANCH}"

                    // Run Docker container to clone the repository using credentials
                    withCredentials([usernamePassword(credentialsId: 'git_credentials_id', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh """
                            docker run --rm -v \$(pwd):/workspace python:3.8 bash -c 'cd /workspace && git clone https://$GIT_USERNAME:$GIT_PASSWORD@${params.GIT_REPO} --branch ${params.BRANCH}'
                        """
                    }
                }
            }
        }

        stage('Trino Schema Validation and Replication') {
            steps {
                script {
                    echo "Validating source and destination Trino catalogs and schemas..."

                    // Run Docker container to execute the Python replication script
                    withCredentials([usernamePassword(credentialsId: 'trino_credentials', passwordVariable: 'TRINO_PASSWORD', usernameVariable: 'TRINO_USERNAME')]) {
                        sh """
                            docker run --rm -v \$(pwd):/workspace python:3.8 bash -c '
                                cd /workspace && python3 replicate_trino_schema.py \
                                --source-trino-host ${params.SOURCE_TRINO_HOST} \
                                --dest-trino-host ${params.DEST_TRINO_HOST} \
                                --source-catalog ${params.SOURCE_CATALOG} \
                                --dest-catalog ${params.DEST_CATALOG} \
                                --schema-name ${params.SCHEMA_NAME} \
                                --username $TRINO_USERNAME \
                                --password $TRINO_PASSWORD \
                                --full-replication ${params.FULL_REPLICATION} \
                                --artifacts-path ${params.ARTIFACTS_PATH} \
                                --dry-run ${params.DRY_RUN}'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace..."
            cleanWs()  // Clean workspace after every run
        }
    }
}
