-- ----------------------------------------------------------------------
-- Phase 1: Core Metadata (DBS, SDS, CDS, TBL)
-- ----------------------------------------------------------------------

-- 1.1 Replicate DBS (databases)
INSERT INTO target_metastore.public.dbs (
  db_id, name, db_location_uri, owner_name, owner_type
)
SELECT 
  db_id, name, db_location_uri, owner_name, owner_type 
FROM source_metastore.public.dbs 
WHERE name = 'abc'
AND NOT EXISTS (
  SELECT 1 FROM target_metastore.public.dbs WHERE name = 'abc'
);

-- Validate
SELECT 'DBS' AS table, COUNT(*) AS count 
FROM target_metastore.public.dbs 
WHERE name = 'abc';


-- 1.2 Replicate SDS (storage descriptors)
INSERT INTO target_metastore.public.sds (
  sd_id, cd_id, input_format, output_format, location, is_compacted
)
SELECT 
  sd_id, cd_id, input_format, output_format, location, is_compacted 
FROM source_metastore.public.sds 
WHERE sd_id IN (
  SELECT DISTINCT sd_id 
  FROM source_metastore.public.tbls 
  WHERE db_id = (SELECT db_id FROM source_metastore.public.dbs WHERE name = 'abc')
)
AND NOT EXISTS (
  SELECT 1 FROM target_metastore.public.sds WHERE sd_id = s.sd_id
);

-- Validate
SELECT 'SDS' AS table, COUNT(*) AS count 
FROM target_metastore.public.sds 
WHERE sd_id IN (
  SELECT sd_id FROM source_metastore.public.tbls 
  WHERE db_id = (SELECT db_id FROM source_metastore.public.dbs WHERE name = 'abc')
);


-- 1.3 Replicate CDS (column descriptors)
INSERT INTO target_metastore.public.cds (
  cd_id, name, comment
)
SELECT 
  cd_id, name, comment 
FROM source_metastore.public.cds 
WHERE cd_id IN (
  SELECT DISTINCT cd_id FROM source_metastore.public.sds
  WHERE sd_id IN (
    SELECT sd_id FROM source_metastore.public.tbls 
    WHERE db_id = (SELECT db_id FROM source_metastore.public.dbs WHERE name = 'abc')
  )
)
AND NOT EXISTS (
  SELECT 1 FROM target_metastore.public.cds WHERE cd_id = c.cd_id
);

-- Validate
SELECT 'CDS' AS table, COUNT(*) AS count 
FROM target_metastore.public.cds 
WHERE cd_id IN (
  SELECT cd_id FROM source_metastore.public.sds
);


-- 1.4 Replicate TBL (tables)
INSERT INTO target_metastore.public.tbls (
  tbl_id, tbl_name, db_id, sd_id, tbl_type, owner
)
SELECT 
  tbl_id, tbl_name, db_id, sd_id, tbl_type, owner 
FROM source_metastore.public.tbls 
WHERE db_id = (SELECT db_id FROM source_metastore.public.dbs WHERE name = 'abc')
AND NOT EXISTS (
  SELECT 1 FROM target_metastore.public.tbls WHERE tbl_id = t.tbl_id
);

-- Validate
SELECT 'TBL' AS table, COUNT(*) AS count 
FROM target_metastore.public.tbls 
WHERE db_id = (SELECT db_id FROM target_metastore.public.dbs WHERE name = 'abc');


-- ----------------------------------------------------------------------
-- Phase 2: Column & Partition Metadata
-- ----------------------------------------------------------------------

-- 2.1 Replicate COLUMNS_V2 (column details)
INSERT INTO target_metastore.public.columns_v2 (
  cd_id, comment, column_name, type_name, integer_idx
)
SELECT 
  cd_id, comment, column_name, type_name, integer_idx 
FROM source_metastore.public.columns_v2 
WHERE cd_id IN (
  SELECT cd_id FROM target_metastore.public.cds
)
AND NOT EXISTS (
  SELECT 1 FROM target_metastore.public.columns_v2 
  WHERE cd_id = c.cd_id AND column_name = c.column_name
);

-- Validate
SELECT 'COLUMNS_V2' AS table, COUNT(*) AS count 
FROM target_metastore.public.columns_v2 
WHERE cd_id IN (SELECT cd_id FROM target_metastore.public.cds);


-- 2.2 Replicate PARTITIONS
INSERT INTO target_metastore.public.partitions (
  part_id, part_name, tbl_id, sd_id, create_time, last_access_time
)
SELECT 
  part_id, part_name, tbl_id, sd_id, create_time, last_access_time 
FROM source_metastore.public.partitions 
WHERE tbl_id IN (
  SELECT tbl_id 
  FROM target_metastore.public.tbls 
  WHERE db_id = (SELECT db_id FROM target_metastore.public.dbs WHERE name = 'abc')
)
AND sd_id IN (SELECT sd_id FROM target_metastore.public.sds)
AND NOT EXISTS (
  SELECT 1 
  FROM target_metastore.public.partitions 
  WHERE part_id = p.part_id
);

-- Validate
SELECT 'PARTITIONS' AS table, COUNT(*) AS count 
FROM target_metastore.public.partitions 
WHERE tbl_id IN (
  SELECT tbl_id FROM target_metastore.public.tbls 
  WHERE db_id = (SELECT db_id FROM target_metastore.public.dbs WHERE name = 'abc')
);


-- 2.3 Replicate PARTITION_KEYS (partition columns)
INSERT INTO target_metastore.public.partition_keys (
  tbl_id, pkey_name, pkey_type, integer_idx
)
SELECT 
  tbl_id, pkey_name, pkey_type, integer_idx 
FROM source_metastore.public.partition_keys 
WHERE tbl_id IN (
  SELECT tbl_id FROM target_metastore.public.tbls 
  WHERE db_id = (SELECT db_id FROM target_metastore.public.dbs WHERE name = 'abc')
);

-- Validate
SELECT 'PARTITION_KEYS' AS table, COUNT(*) AS count 
FROM target_metastore.public.partition_keys 
WHERE tbl_id IN (
  SELECT tbl_id FROM target_metastore.public.tbls 
  WHERE db_id = (SELECT db_id FROM target_metastore.public.dbs WHERE name = 'abc')
);


-- ----------------------------------------------------------------------
-- Phase 3: Optional Metadata (Params, Stats)
-- ----------------------------------------------------------------------

-- 3.1 Replicate TABLE_PARAMS (table properties)
INSERT INTO target_metastore.public.table_params (
  tbl_id, param_key, param_value
)
SELECT 
  tbl_id, param_key, param_value 
FROM source_metastore.public.table_params 
WHERE tbl_id IN (
  SELECT tbl_id FROM target_metastore.public.tbls 
  WHERE db_id = (SELECT db_id FROM target_metastore.public.dbs WHERE name = 'abc')
);

-- 3.2 Replicate PARTITION_PARAMS (partition properties)
INSERT INTO target_metastore.public.partition_params (
  part_id, param_key, param_value
)
SELECT 
  part_id, param_key, param_value 
FROM source_metastore.public.partition_params 
WHERE part_id IN (
  SELECT part_id FROM target_metastore.public.partitions
);
